/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    Map<Integer, Integer> hmap;
    int max = 0;

    public void traverse(TreeNode node){
        if(node == null)
            return;
        
        if(this.hmap.containsKey(node.val)){
            hmap.put(node.val, hmap.get(node.val) + 1);
        }
        else{
            hmap.put(node.val, 1);
        }

        max = Math.max(hmap.get(node.val), max);

        traverse(node.left);
        traverse(node.right);
    }

    public int[] findMode(TreeNode root) {
        this.hmap = new HashMap<>();
        traverse(root);
        List<Integer> al = new ArrayList<>();

        for(Integer i: hmap.keySet()){
            if(hmap.get(i) == max){
                al.add(i);
            }
        }

        int[] arr = new int[al.size()];
        for(int i = 0; i<al.size(); i++){
            arr[i] = al.get(i);
        }
        return arr;
    }
}
